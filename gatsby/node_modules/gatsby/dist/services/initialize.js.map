{"version":3,"sources":["../../src/services/initialize.ts"],"names":["process","env","gatsby_executing_command","GATSBY_EXPERIMENTAL_FAST_DEV","GATSBY_EXPERIMENTAL_LAZY_DEVJS","GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND","GATSBY_EXPERIMENTAL_DEV_SSR","reporter","info","on","reason","panic","initialize","program","args","parentSpan","setStore","store","directory","browserslist","dispatch","type","payload","activityForJobs","emitter","phantomActivity","start","onEndJob","getState","jobs","active","length","end","activity","activityTimer","configModule","configFilePath","config","id","context","configName","path","__experimentalThemes","warn","themes","useLegacyThemes","rootDir","plugins","polyfill","internalActions","setSiteConfig","telemetry","trackFeatureIsUsed","flattenedPlugins","pluginsStr","_","uniq","map","p","name","version","decorateEvent","span","GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES","NODE_ENV","pluginVersions","hashes","Promise","all","catch","pluginsHash","crypto","createHash","update","JSON","stringify","concat","digest","state","oldPluginsHash","status","PLUGINS_HASH","stripIndent","cacheDirectory","publicDirectory","cacheIsCorrupt","fs","existsSync","remove","emptyDir","e","error","pluginCachesPurged","ensureDir","srcDir","__dirname","siteDir","tryRequire","copy","ensureDirSync","err","hasAPIFile","plugin","skipSSR","undefined","envAPIs","require","resolve","join","Array","isArray","isResolved","ssrPlugins","options","pluginOptions","filter","browserPlugins","browserPluginsRequires","relativePluginPath","relative","browserAPIRunner","sSRAPIRunner","readFileSync","ssrPluginsRequires","writeFileSync","extensions","apiResults","traceId","flattenDeep","workerPool","WorkerPool","create"],"mappings":"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","sourcesContent":["import _ from \"lodash\"\nimport { slash, isCI } from \"gatsby-core-utils\"\nimport fs from \"fs-extra\"\nimport md5File from \"md5-file\"\nimport crypto from \"crypto\"\nimport del from \"del\"\nimport path from \"path\"\nimport telemetry from \"gatsby-telemetry\"\n\nimport apiRunnerNode from \"../utils/api-runner-node\"\nimport { getBrowsersList } from \"../utils/browserslist\"\nimport { showExperimentNoticeAfterTimeout } from \"../utils/show-experiment-notice\"\nimport sampleSiteForExperiment from \"../utils/sample-site-for-experiment\"\nimport { Store, AnyAction } from \"redux\"\nimport { preferDefault } from \"../bootstrap/prefer-default\"\nimport * as WorkerPool from \"../utils/worker/pool\"\nimport JestWorker from \"jest-worker\"\nimport { startPluginRunner } from \"../redux/plugin-runner\"\nimport { loadPlugins } from \"../bootstrap/load-plugins\"\nimport { store, emitter } from \"../redux\"\nimport loadThemes from \"../bootstrap/load-themes\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { getConfigFile } from \"../bootstrap/get-config-file\"\nimport { removeStaleJobs } from \"../bootstrap/remove-stale-jobs\"\nimport { IPluginInfoOptions } from \"../bootstrap/load-plugins/types\"\nimport { internalActions } from \"../redux/actions\"\nimport { IGatsbyState } from \"../redux/types\"\nimport { IBuildContext } from \"./types\"\n\ninterface IPluginResolution {\n  resolve: string\n  options: IPluginInfoOptions\n}\n\n// If the env variable GATSBY_EXPERIMENTAL_FAST_DEV is set, enable\n// all DEV experimental changes (but only during development & not on CI).\nif (\n  process.env.gatsby_executing_command === `develop` &&\n  process.env.GATSBY_EXPERIMENTAL_FAST_DEV &&\n  !isCI()\n) {\n  process.env.GATSBY_EXPERIMENTAL_LAZY_DEVJS = `true`\n  process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND = `true`\n  process.env.GATSBY_EXPERIMENTAL_DEV_SSR = `true`\n\n  reporter.info(`\nThree fast dev experiments are enabled, Lazy Bundling, Query on Demand, and Development SSR.\n\nPlease give feedback on their respective umbrella issues!\n\n- https://gatsby.dev/lazy-devjs-umbrella\n- https://gatsby.dev/query-on-demand-feedback\n- https://gatsby.dev/dev-ssr-feedback\n  `)\n}\n\nif (\n  process.env.gatsby_executing_command === `develop` &&\n  !process.env.GATSBY_EXPERIMENTAL_DEV_SSR &&\n  !isCI() &&\n  sampleSiteForExperiment(`DEV_SSR`, 1)\n) {\n  showExperimentNoticeAfterTimeout(\n    `devSSR`,\n    `\nYour dev experience is about to get better, faster, and stronger!\n\nWe'll soon be shipping support for SSR in development.\n\nThis will help the dev environment more closely mimic builds so you'll catch build errors earlier and fix them faster.\n\nTry out develop SSR *today* by running your site with it enabled:\n\nGATSBY_EXPERIMENTAL_DEV_SSR=true gatsby develop\n\nPlease let us know how it goes good, bad, or otherwise at gatsby.dev/dev-ssr-feedback\n      `,\n    1 // Show this immediately to the subset of sites selected.\n  )\n}\n\n// Show stack trace on unhandled promises.\nprocess.on(`unhandledRejection`, (reason: unknown) => {\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/33636\n  reporter.panic((reason as Error) || `Unhandled rejection`)\n})\n\n// Override console.log to add the source file + line number.\n// Useful for debugging if you lose a console.log somewhere.\n// Otherwise leave commented out.\n// require(`../bootstrap/log-line-function`)\n\nexport async function initialize({\n  program: args,\n  parentSpan,\n}: IBuildContext): Promise<{\n  store: Store<IGatsbyState, AnyAction>\n  workerPool: JestWorker\n}> {\n  if (!args) {\n    reporter.panic(`Missing program args`)\n  }\n\n  /* Time for a little story...\n   * When running `gatsby develop`, the globally installed gatsby-cli starts\n   * and sets up a Redux store (which is where logs are now stored). When gatsby\n   * finds your project's locally installed gatsby-cli package in node_modules,\n   * it switches over. This instance will have a separate redux store. We need to\n   * ensure that the correct store is used which is why we call setStore\n   * (/packages/gatsby-cli/src/reporter/redux/index.js)\n   *\n   * This function\n   * - copies over the logs from the global gatsby-cli to the local one\n   * - sets the store to the local one (so that further actions dispatched by\n   * the global gatsby-cli are handled by the local one)\n   */\n  if (args.setStore) {\n    args.setStore(store)\n  }\n\n  // Start plugin runner which listens to the store\n  // and invokes Gatsby API based on actions.\n  startPluginRunner()\n\n  const directory = slash(args.directory)\n\n  const program = {\n    ...args,\n    browserslist: getBrowsersList(directory),\n    // Fix program directory path for windows env.\n    directory,\n  }\n\n  store.dispatch({\n    type: `SET_PROGRAM`,\n    payload: program,\n  })\n\n  let activityForJobs\n\n  emitter.on(`CREATE_JOB`, () => {\n    if (!activityForJobs) {\n      activityForJobs = reporter.phantomActivity(`Running jobs`)\n      activityForJobs.start()\n    }\n  })\n\n  const onEndJob = (): void => {\n    if (activityForJobs && store.getState().jobs.active.length === 0) {\n      activityForJobs.end()\n      activityForJobs = null\n    }\n  }\n\n  emitter.on(`END_JOB`, onEndJob)\n\n  // Try opening the site's gatsby-config.js file.\n  let activity = reporter.activityTimer(`open and validate gatsby-configs`, {\n    parentSpan,\n  })\n  activity.start()\n  const { configModule, configFilePath } = await getConfigFile(\n    program.directory,\n    `gatsby-config`\n  )\n  let config = preferDefault(configModule)\n\n  // The root config cannot be exported as a function, only theme configs\n  if (typeof config === `function`) {\n    reporter.panic({\n      id: `10126`,\n      context: {\n        configName: `gatsby-config`,\n        path: program.directory,\n      },\n    })\n  }\n\n  // theme gatsby configs can be functions or objects\n  if (config && config.__experimentalThemes) {\n    reporter.warn(\n      `The gatsby-config key \"__experimentalThemes\" has been deprecated. Please use the \"plugins\" key instead.`\n    )\n    const themes = await loadThemes(config, {\n      useLegacyThemes: true,\n      configFilePath,\n      rootDir: program.directory,\n    })\n    config = themes.config\n\n    store.dispatch({\n      type: `SET_RESOLVED_THEMES`,\n      payload: themes.themes,\n    })\n  } else if (config) {\n    const plugins = await loadThemes(config, {\n      useLegacyThemes: false,\n      configFilePath,\n      rootDir: program.directory,\n    })\n    config = plugins.config\n  }\n\n  if (config && config.polyfill) {\n    reporter.warn(\n      `Support for custom Promise polyfills has been removed in Gatsby v2. We only support Babel 7's new automatic polyfilling behavior.`\n    )\n  }\n\n  store.dispatch(internalActions.setSiteConfig(config))\n\n  activity.end()\n\n  if (process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND) {\n    if (process.env.gatsby_executing_command !== `develop`) {\n      // we don't want to ever have this flag enabled for anything than develop\n      // in case someone have this env var globally set\n      delete process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND\n    } else if (isCI()) {\n      delete process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND\n      reporter.warn(\n        `Experimental Query on Demand feature is not available in CI environment. Continuing with regular mode.`\n      )\n    } else {\n      // We already show a notice for this flag.\n      if (!process.env.GATSBY_EXPERIMENTAL_FAST_DEV) {\n        reporter.info(`Using experimental Query on Demand feature`)\n      }\n      telemetry.trackFeatureIsUsed(`QueryOnDemand`)\n    }\n  }\n\n  if (process.env.GATSBY_EXPERIMENTAL_LAZY_DEVJS) {\n    telemetry.trackFeatureIsUsed(`ExperimentalLazyDevjs`)\n  }\n\n  // run stale jobs\n  store.dispatch(removeStaleJobs(store.getState()))\n\n  activity = reporter.activityTimer(`load plugins`, {\n    parentSpan,\n  })\n  activity.start()\n  const flattenedPlugins = await loadPlugins(config, program.directory)\n  activity.end()\n\n  // Multiple occurrences of the same name-version-pair can occur,\n  // so we report an array of unique pairs\n  const pluginsStr = _.uniq(flattenedPlugins.map(p => `${p.name}@${p.version}`))\n  telemetry.decorateEvent(`BUILD_END`, {\n    plugins: pluginsStr,\n  })\n\n  telemetry.decorateEvent(`DEVELOP_STOP`, {\n    plugins: pluginsStr,\n  })\n\n  // onPreInit\n  activity = reporter.activityTimer(`onPreInit`, {\n    parentSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`onPreInit`, { parentSpan: activity.span })\n  activity.end()\n\n  // During builds, delete html and css files from the public directory as we don't want\n  // deleted pages and styles from previous builds to stick around.\n  if (\n    !process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES &&\n    process.env.NODE_ENV === `production`\n  ) {\n    activity = reporter.activityTimer(\n      `delete html and css files from previous builds`,\n      {\n        parentSpan,\n      }\n    )\n    activity.start()\n    await del([\n      `public/**/*.{html,css}`,\n      `!public/page-data/**/*`,\n      `!public/static`,\n      `!public/static/**/*.{html,css}`,\n    ])\n    activity.end()\n  }\n\n  activity = reporter.activityTimer(`initialize cache`, {\n    parentSpan,\n  })\n  activity.start()\n  // Check if any plugins have been updated since our last run. If so\n  // we delete the cache is there's likely been changes\n  // since the previous run.\n  //\n  // We do this by creating a hash of all the version numbers of installed\n  // plugins, the site's package.json, gatsby-config.js, and gatsby-node.js.\n  // The last, gatsby-node.js, is important as many gatsby sites put important\n  // logic in there e.g. generating slugs for custom pages.\n  const pluginVersions = flattenedPlugins.map(p => p.version)\n  const hashes: any = await Promise.all([\n    !!process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES,\n    md5File(`package.json`),\n    md5File(`${program.directory}/gatsby-config.js`).catch(() => {}), // ignore as this file isn't required),\n    md5File(`${program.directory}/gatsby-node.js`).catch(() => {}), // ignore as this file isn't required),\n  ])\n  const pluginsHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(pluginVersions.concat(hashes)))\n    .digest(`hex`)\n  const state = store.getState()\n  const oldPluginsHash = state && state.status ? state.status.PLUGINS_HASH : ``\n\n  // Check if anything has changed. If it has, delete the site's .cache\n  // directory and tell reducers to empty themselves.\n  //\n  // Also if the hash isn't there, then delete things just in case something\n  // is weird.\n  if (oldPluginsHash && pluginsHash !== oldPluginsHash) {\n    reporter.info(reporter.stripIndent`\n      One or more of your plugins have changed since the last time you ran Gatsby. As\n      a precaution, we're deleting your site's cache to ensure there's no stale data.\n    `)\n  }\n  const cacheDirectory = `${program.directory}/.cache`\n  const publicDirectory = `${program.directory}/public`\n\n  // .cache directory exists in develop at this point\n  // so checking for .cache/json as a heuristic (could be any expected file)\n  const cacheIsCorrupt =\n    fs.existsSync(`${cacheDirectory}/json`) && !fs.existsSync(publicDirectory)\n\n  if (cacheIsCorrupt) {\n    reporter.info(reporter.stripIndent`\n      We've detected that the Gatsby cache is incomplete (the .cache directory exists\n      but the public directory does not). As a precaution, we're deleting your site's\n      cache to ensure there's no stale data.\n    `)\n  }\n\n  if (!oldPluginsHash || pluginsHash !== oldPluginsHash || cacheIsCorrupt) {\n    try {\n      // Attempt to empty dir if remove fails,\n      // like when directory is mount point\n      await fs.remove(cacheDirectory).catch(() => fs.emptyDir(cacheDirectory))\n    } catch (e) {\n      reporter.error(`Failed to remove .cache files.`, e)\n    }\n    // Tell reducers to delete their data (the store will already have\n    // been loaded from the file system cache).\n    store.dispatch({\n      type: `DELETE_CACHE`,\n      cacheIsCorrupt,\n    })\n\n    // in future this should show which plugin's caches are purged\n    // possibly should also have which plugins had caches\n    telemetry.decorateEvent(`BUILD_END`, {\n      pluginCachesPurged: [`*`],\n    })\n    telemetry.decorateEvent(`DEVELOP_STOP`, {\n      pluginCachesPurged: [`*`],\n    })\n  }\n\n  // Update the store with the new plugins hash.\n  store.dispatch({\n    type: `UPDATE_PLUGINS_HASH`,\n    payload: pluginsHash,\n  })\n\n  // Now that we know the .cache directory is safe, initialize the cache\n  // directory.\n  await fs.ensureDir(cacheDirectory)\n\n  // Ensure the public/static directory\n  await fs.ensureDir(`${publicDirectory}/static`)\n\n  activity.end()\n\n  activity = reporter.activityTimer(`copy gatsby files`, {\n    parentSpan,\n  })\n  activity.start()\n  const srcDir = `${__dirname}/../../cache-dir`\n  const siteDir = cacheDirectory\n  const tryRequire = `${__dirname}/../utils/test-require-error.js`\n  try {\n    await fs.copy(srcDir, siteDir)\n    await fs.copy(tryRequire, `${siteDir}/test-require-error.js`)\n    await fs.ensureDirSync(`${cacheDirectory}/json`)\n\n    // Ensure .cache/fragments exists and is empty. We want fragments to be\n    // added on every run in response to data as fragments can only be added if\n    // the data used to create the schema they're dependent on is available.\n    await fs.emptyDir(`${cacheDirectory}/fragments`)\n  } catch (err) {\n    reporter.panic(`Unable to copy site files to .cache`, err)\n  }\n\n  // Find plugins which implement gatsby-browser and gatsby-ssr and write\n  // out api-runners for them.\n  const hasAPIFile = (env, plugin): string | undefined => {\n    // The plugin loader has disabled SSR APIs for this plugin. Usually due to\n    // multiple implementations of an API that can only be implemented once\n    if (env === `ssr` && plugin.skipSSR === true) return undefined\n\n    const envAPIs = plugin[`${env}APIs`]\n\n    // Always include gatsby-browser.js files if they exist as they're\n    // a handy place to include global styles and other global imports.\n    try {\n      if (env === `browser`) {\n        return slash(\n          require.resolve(path.join(plugin.resolve, `gatsby-${env}`))\n        )\n      }\n    } catch (e) {\n      // ignore\n    }\n\n    if (envAPIs && Array.isArray(envAPIs) && envAPIs.length > 0) {\n      return slash(path.join(plugin.resolve, `gatsby-${env}`))\n    }\n    return undefined\n  }\n\n  const isResolved = (plugin): plugin is IPluginResolution => !!plugin.resolve\n\n  const ssrPlugins: Array<IPluginResolution> = flattenedPlugins\n    .map(plugin => {\n      return {\n        resolve: hasAPIFile(`ssr`, plugin),\n        options: plugin.pluginOptions,\n      }\n    })\n    .filter(isResolved)\n\n  const browserPlugins: Array<IPluginResolution> = flattenedPlugins\n    .map(plugin => {\n      return {\n        resolve: hasAPIFile(`browser`, plugin),\n        options: plugin.pluginOptions,\n      }\n    })\n    .filter(isResolved)\n\n  const browserPluginsRequires = browserPlugins\n    .map(plugin => {\n      // we need a relative import path to keep contenthash the same if directory changes\n      const relativePluginPath = path.relative(siteDir, plugin.resolve)\n      return `{\n      plugin: require('${slash(relativePluginPath)}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    })\n    .join(`,`)\n\n  const browserAPIRunner = `module.exports = [${browserPluginsRequires}]\\n`\n\n  let sSRAPIRunner = ``\n\n  try {\n    sSRAPIRunner = fs.readFileSync(`${siteDir}/api-runner-ssr.js`, `utf-8`)\n  } catch (err) {\n    reporter.panic(`Failed to read ${siteDir}/api-runner-ssr.js`, err)\n  }\n\n  const ssrPluginsRequires = ssrPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n  sSRAPIRunner = `var plugins = [${ssrPluginsRequires}]\\n${sSRAPIRunner}`\n\n  fs.writeFileSync(\n    `${siteDir}/api-runner-browser-plugins.js`,\n    browserAPIRunner,\n    `utf-8`\n  )\n  fs.writeFileSync(`${siteDir}/api-runner-ssr.js`, sSRAPIRunner, `utf-8`)\n\n  activity.end()\n  /**\n   * Start the main bootstrap processes.\n   */\n\n  // onPreBootstrap\n  activity = reporter.activityTimer(`onPreBootstrap`, {\n    parentSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`onPreBootstrap`, {\n    parentSpan: activity.span,\n  })\n  activity.end()\n\n  // Collect resolvable extensions and attach to program.\n  const extensions = [`.mjs`, `.js`, `.jsx`, `.wasm`, `.json`]\n  // Change to this being an action and plugins implement `onPreBootstrap`\n  // for adding extensions.\n  const apiResults = await apiRunnerNode(`resolvableExtensions`, {\n    traceId: `initial-resolvableExtensions`,\n    parentSpan,\n  })\n\n  store.dispatch({\n    type: `SET_PROGRAM_EXTENSIONS`,\n    payload: _.flattenDeep([extensions, apiResults]),\n  })\n\n  const workerPool = WorkerPool.create()\n\n  return {\n    store,\n    workerPool,\n  }\n}\n"],"file":"initialize.js"}