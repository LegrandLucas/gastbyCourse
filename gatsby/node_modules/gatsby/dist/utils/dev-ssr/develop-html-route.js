"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.route = void 0;

var _reporter = _interopRequireDefault(require("gatsby-cli/lib/reporter"));

var _gatsbyTelemetry = require("gatsby-telemetry");

var _findPageByPath = require("../find-page-by-path");

var _renderDevHtml = require("./render-dev-html");

const route = ({
  app,
  program,
  store
}) => // Render an HTML page and serve it.
app.get(`*`, async (req, res, next) => {
  (0, _gatsbyTelemetry.trackFeatureIsUsed)(`GATSBY_EXPERIMENTAL_DEV_SSR`);
  const pathObj = (0, _findPageByPath.findPageByPath)(store.getState(), req.path);

  if (!pathObj) {
    return next();
  }

  const htmlActivity = _reporter.default.phantomActivity(`building HTML for path`, {});

  htmlActivity.start();

  try {
    const renderResponse = await (0, _renderDevHtml.renderDevHTML)({
      path: pathObj.path,
      page: pathObj,
      store,
      htmlComponentRendererPath: `${program.directory}/public/render-page.js`,
      directory: program.directory
    });
    res.status(200).send(renderResponse);
  } catch (error) {
    // THe page errored but couldn't read the page component.
    // This is a race condition when a page is deleted but its requested
    // immediately after before anything can recompile.
    if (error === `404 page`) {
      return next();
    }

    _reporter.default.error({
      id: `11614`,
      filePath: error.filename,
      location: {
        start: {
          line: error.line,
          column: error.row
        }
      },
      context: {
        path: pathObj.path,
        filePath: error.filename,
        line: error.line,
        column: error.row
      }
    });

    let errorHtml = `<title>Develop SSR Error</title><h1>Error<h1>
        <h2>The page didn't SSR correctly</h2>
        <ul>
          <li><strong>URL path:</strong> <code>${req.path}</code></li>
          <li><strong>File path:</strong> <code>${error.filename}</code></li>
        </ul>
        <h3>error message</h3>
        <p><code>${error.message}</code></p>`;

    if (error.codeFrame) {
      errorHtml += `<pre style="background:#fdfaf6;padding:8px;">${error.codeFrame}</pre>`;
    }

    res.status(500).send(errorHtml);
  }

  htmlActivity.end(); // Make eslint happy

  return null;
});

exports.route = route;
//# sourceMappingURL=develop-html-route.js.map