"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.startServer = startServer;

var _webpackHotMiddleware = _interopRequireDefault(require("webpack-hot-middleware"));

var _webpackDevMiddleware = _interopRequireDefault(require("webpack-dev-middleware"));

var _got = _interopRequireDefault(require("got"));

var _webpack = _interopRequireDefault(require("webpack"));

var _express = _interopRequireDefault(require("express"));

var _compression = _interopRequireDefault(require("compression"));

var _expressGraphql = _interopRequireDefault(require("express-graphql"));

var _graphqlPlaygroundMiddlewareExpress = _interopRequireDefault(require("graphql-playground-middleware-express"));

var _gatsbyGraphiqlExplorer = _interopRequireDefault(require("gatsby-graphiql-explorer"));

var _graphql = require("graphql");

var _http = _interopRequireDefault(require("http"));

var _cors = _interopRequireDefault(require("cors"));

var _gatsbyTelemetry = _interopRequireDefault(require("gatsby-telemetry"));

var _launchEditor = _interopRequireDefault(require("react-dev-utils/launchEditor"));

var _gatsbyCoreUtils = require("gatsby-core-utils");

var _path = require("../utils/path");

var _webpack2 = _interopRequireDefault(require("../utils/webpack.config"));

var _redux = require("../redux");

var _reporter = _interopRequireDefault(require("gatsby-cli/lib/reporter"));

var WorkerPool = _interopRequireWildcard(require("../utils/worker/pool"));

var _showExperimentNotice = require("../utils/show-experiment-notice");

var _developStatic = require("../commands/develop-static");

var _context = _interopRequireDefault(require("../schema/context"));

var _websocketManager = require("../utils/websocket-manager");

var _pageData = require("./page-data");

var _getPageData = require("./get-page-data");

var _findPageByPath = require("./find-page-by-path");

var _apiRunnerNode = _interopRequireDefault(require("../utils/api-runner-node"));

var path = _interopRequireWildcard(require("path"));

var _types = require("../commands/types");

async function startServer(program, app, workerPool = WorkerPool.create()) {
  const directory = program.directory;

  const webpackActivity = _reporter.default.activityTimer(`Building development bundle`, {
    id: `webpack-develop`
  });

  webpackActivity.start(); // Remove the following when merging GATSBY_EXPERIMENTAL_DEV_SSR

  const directoryPath = (0, _path.withBasePath)(directory);

  const {
    buildHTML
  } = require(`../commands/build-html`);

  const createIndexHtml = async activity => {
    try {
      await buildHTML({
        program,
        stage: _types.Stage.DevelopHTML,
        pagePaths: [`/`],
        workerPool,
        activity
      });
    } catch (err) {
      if (err.name !== `WebpackError`) {
        _reporter.default.panic(err);

        return;
      }

      _reporter.default.panic(_reporter.default.stripIndent`
          There was an error compiling the html.js component for the development server.
          See our docs page on debugging HTML builds for help https://gatsby.dev/debug-html
        `, err);
    }
  };

  const indexHTMLActivity = _reporter.default.phantomActivity(`building index.html`, {});

  if (process.env.GATSBY_EXPERIMENTAL_DEV_SSR) {
    const {
      buildRenderer
    } = require(`../commands/build-html`);

    await buildRenderer(program, _types.Stage.DevelopHTML);

    const {
      initDevWorkerPool
    } = require(`./dev-ssr/render-dev-html`);

    initDevWorkerPool();
  } else {
    indexHTMLActivity.start();
    await createIndexHtml(indexHTMLActivity);
    indexHTMLActivity.end();
  }

  const TWENTY_SECONDS = 20 * 1000;
  let cancelDevJSNotice;

  if (process.env.gatsby_executing_command === `develop` && !process.env.GATSBY_EXPERIMENTAL_LAZY_DEVJS && !(0, _gatsbyCoreUtils.isCI)()) {
    cancelDevJSNotice = (0, _showExperimentNotice.showExperimentNoticeAfterTimeout)(`LAZY_DEVJS`, _reporter.default.stripIndent(`
Your local development experience is about to get better, faster, and stronger!

Your friendly Gatsby maintainers detected your site takes longer than ideal to bundle your JavaScript. We're working right now to improve this.

If you're interested in trialing out one of these future improvements *today* which should make your local development experience faster, go ahead and run your site with LAZY_DEVJS enabled.

GATSBY_EXPERIMENTAL_LAZY_DEVJS=true gatsby develop

Please do let us know how it goes (good, bad, or otherwise) at https://gatsby.dev/lazy-devjs-umbrella
      `), TWENTY_SECONDS);
  }

  const devConfig = await (0, _webpack2.default)(program, directory, `develop`, program.port, {
    parentSpan: webpackActivity.span
  });
  const compiler = (0, _webpack.default)(devConfig);

  if (process.env.GATSBY_EXPERIMENTAL_LAZY_DEVJS) {
    const bodyParser = require(`body-parser`);

    const {
      boundActionCreators
    } = require(`../redux/actions`);

    const {
      createClientVisitedPage
    } = boundActionCreators; // Listen for the client marking a page as visited (meaning we need to
    // compile its page component.

    const chunkCalls = new Set();
    app.post(`/___client-page-visited`, bodyParser.json(), (req, res, next) => {
      var _req$body;

      if ((_req$body = req.body) === null || _req$body === void 0 ? void 0 : _req$body.chunkName) {
        // Ignore all but the first POST.
        if (!chunkCalls.has(req.body.chunkName)) {
          // Tell Gatsby there's a new page component to trigger it
          // being added to the bundle.
          createClientVisitedPage(req.body.chunkName); // Tell Gatsby to rewrite the page data for the pages
          // owned by this component to update it to say that
          // its page component is now part of the dev bundle.
          // The pages will be rewritten after the webpack compilation
          // finishes.
          //
          // Set a timeout to ensure the webpack compile of the new page
          // component triggered above has time to go through.

          setTimeout(() => {
            // Find the component page for this componentChunkName.
            const pages = _redux.store.getState().pages;

            function getByChunkName(map, searchValue) {
              for (const [key, value] of map.entries()) {
                if (value.componentChunkName === searchValue) return key;
              }

              return undefined;
            }

            const pageKey = getByChunkName(pages, req.body.chunkName);

            if (pageKey) {
              const page = pages.get(pageKey);

              if (page) {
                _redux.store.dispatch({
                  type: `ADD_PENDING_TEMPLATE_DATA_WRITE`,
                  payload: {
                    pages: [{
                      componentPath: page.component
                    }]
                  }
                });
              }
            }

            chunkCalls.add(req.body.chunkName);
          }, 20);
        }

        res.send(`ok`);
      } else {
        next();
      }
    });
  }
  /**
   * Set up the express app.
   **/


  app.use((0, _compression.default)());
  app.use(_gatsbyTelemetry.default.expressMiddleware(`DEVELOP`));
  app.use((0, _webpackHotMiddleware.default)(compiler, {
    log: false,
    path: `/__webpack_hmr`,
    heartbeat: 10 * 1000
  }));
  app.use((0, _cors.default)());
  /**
   * Pattern matching all endpoints with graphql or graphiql with 1 or more leading underscores
   */

  const graphqlEndpoint = `/_+graphi?ql`;

  if (process.env.GATSBY_GRAPHQL_IDE === `playground`) {
    app.get(graphqlEndpoint, (0, _graphqlPlaygroundMiddlewareExpress.default)({
      endpoint: `/___graphql`
    }), () => {});
  } else {
    (0, _gatsbyGraphiqlExplorer.default)(app, {
      graphqlEndpoint
    });
  }

  app.use(graphqlEndpoint, (0, _expressGraphql.default)(() => {
    const {
      schema,
      schemaCustomization
    } = _redux.store.getState();

    if (!schemaCustomization.composer) {
      throw new Error(`A schema composer was not created in time. This is likely a gatsby bug. If you experienced this please create an issue.`);
    }

    return {
      schema,
      graphiql: false,

      extensions() {
        return {
          enableRefresh: process.env.ENABLE_GATSBY_REFRESH_ENDPOINT,
          refreshToken: process.env.GATSBY_REFRESH_TOKEN
        };
      },

      context: (0, _context.default)({
        schema,
        schemaComposer: schemaCustomization.composer,
        context: {},
        customContext: schemaCustomization.context
      }),

      customFormatErrorFn(err) {
        return { ...(0, _graphql.formatError)(err),
          stack: err.stack ? err.stack.split(`\n`) : []
        };
      }

    };
  }));
  /**
   * Refresh external data sources.
   * This behavior is disabled by default, but the ENABLE_GATSBY_REFRESH_ENDPOINT env var enables it
   * If no GATSBY_REFRESH_TOKEN env var is available, then no Authorization header is required
   **/

  const REFRESH_ENDPOINT = `/__refresh`;

  const refresh = async req => {
    _redux.emitter.emit(`WEBHOOK_RECEIVED`, {
      webhookBody: req.body
    });
  };

  app.use(REFRESH_ENDPOINT, _express.default.json());
  app.post(REFRESH_ENDPOINT, (req, res) => {
    const enableRefresh = process.env.ENABLE_GATSBY_REFRESH_ENDPOINT;
    const refreshToken = process.env.GATSBY_REFRESH_TOKEN;
    const authorizedRefresh = !refreshToken || req.headers.authorization === refreshToken;

    if (enableRefresh && authorizedRefresh) {
      refresh(req);
    }

    res.end();
  });
  app.get(`/__open-stack-frame-in-editor`, (req, res) => {
    (0, _launchEditor.default)(req.query.fileName, req.query.lineNumber);
    res.end();
  });
  app.get(`/page-data/:pagePath(*)/page-data.json`, async (req, res, next) => {
    const requestedPagePath = req.params.pagePath;

    if (!requestedPagePath) {
      next();
      return;
    }

    const potentialPagePath = (0, _pageData.reverseFixedPagePath)(requestedPagePath);
    const page = (0, _findPageByPath.findPageByPath)(_redux.store.getState(), potentialPagePath, false);

    if (page) {
      try {
        const pageData = process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND ? await (0, _getPageData.getPageData)(page.path) : await (0, _pageData.readPageData)(path.join(_redux.store.getState().program.directory, `public`), page.path);
        res.status(200).send(pageData);
        return;
      } catch (e) {
        _reporter.default.error(`Error loading a result for the page query in "${requestedPagePath}" / "${potentialPagePath}". Query was not run and no cached result was found.`, e);
      }
    }

    res.status(404).send({
      path: potentialPagePath
    });
  }); // Disable directory indexing i.e. serving index.html from a directory.
  // This can lead to serving stale html files during development.
  //
  // We serve by default an empty index.html that sets up the dev environment.

  app.use((0, _developStatic.developStatic)(`public`, {
    index: false
  }));
  const webpackDevMiddlewareInstance = (0, _webpackDevMiddleware.default)(compiler, {
    logLevel: `silent`,
    publicPath: devConfig.output.publicPath,
    watchOptions: devConfig.devServer ? devConfig.devServer.watchOptions : null,
    stats: `errors-only`
  });
  app.use(webpackDevMiddlewareInstance); // Expose access to app for advanced use cases

  const {
    developMiddleware
  } = _redux.store.getState().config;

  if (developMiddleware) {
    developMiddleware(app, program);
  } // Set up API proxy.


  const {
    proxy
  } = _redux.store.getState().config;

  if (proxy) {
    proxy.forEach(({
      prefix,
      url
    }) => {
      app.use(`${prefix}/*`, (req, res) => {
        const proxiedUrl = url + req.originalUrl;
        const {
          // remove `host` from copied headers
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          headers: {
            host,
            ...headers
          },
          method
        } = req;
        req.pipe(_got.default.stream(proxiedUrl, {
          headers,
          method,
          decompress: false
        }).on(`response`, response => res.writeHead(response.statusCode || 200, response.headers)).on(`error`, (err, _, response) => {
          if (response) {
            res.writeHead(response.statusCode || 400, response.headers);
          } else {
            const message = `Error when trying to proxy request "${req.originalUrl}" to "${proxiedUrl}"`;

            _reporter.default.error(message, err);

            res.sendStatus(500);
          }
        })).pipe(res);
      });
    }, (0, _cors.default)());
  }

  await (0, _apiRunnerNode.default)(`onCreateDevServer`, {
    app,
    deferNodeMutation: true
  }); // In case nothing before handled hot-update - send 404.
  // This fixes "Unexpected token < in JSON at position 0" runtime
  // errors after restarting development server and
  // cause automatic hard refresh in the browser.

  app.use(/.*\.hot-update\.json$/i, (_, res) => {
    res.status(404).end();
  }); // Render an HTML page and serve it.

  if (process.env.GATSBY_EXPERIMENTAL_DEV_SSR) {
    // Setup HTML route.
    const {
      route
    } = require(`./dev-ssr/develop-html-route`);

    route({
      app,
      program,
      store: _redux.store
    });
  }

  app.use(async (req, res) => {
    const fullUrl = req.protocol + `://` + req.get(`host`) + req.originalUrl; // This isn't used in development.

    if (fullUrl.endsWith(`app-data.json`)) {
      res.json({
        webpackCompilationHash: `123`
      }); // If this gets here, it's a non-existant file so just send back 404.
    } else if (fullUrl.endsWith(`.json`)) {
      res.json({}).status(404);
    } else {
      if (process.env.GATSBY_EXPERIMENTAL_DEV_SSR) {
        try {
          const {
            renderDevHTML
          } = require(`./dev-ssr/render-dev-html`);

          const renderResponse = await renderDevHTML({
            path: `/dev-404-page/`,
            // Let renderDevHTML figure it out.
            page: undefined,
            store: _redux.store,
            htmlComponentRendererPath: `${program.directory}/public/render-page.js`,
            directory: program.directory
          });
          const status = process.env.GATSBY_EXPERIMENTAL_DEV_SSR ? 404 : 200;
          res.status(status).send(renderResponse);
        } catch (e) {
          _reporter.default.error(e);

          res.send(e).status(500);
        }
      } else {
        res.sendFile(directoryPath(`public/index.html`), err => {
          if (err) {
            res.status(500).end();
          }
        });
      }
    }
  });
  /**
   * Set up the HTTP server and socket.io.
   **/

  const server = new _http.default.Server(app);

  const socket = _websocketManager.websocketManager.init({
    server
  }); // hardcoded `localhost`, because host should match `target` we set
  // in http proxy in `develop-proxy`


  const listener = server.listen(program.port, `localhost`);

  if (!process.env.GATSBY_EXPERIMENTAL_DEV_SSR) {
    const chokidar = require(`chokidar`);

    const {
      slash
    } = require(`gatsby-core-utils`); // Register watcher that rebuilds index.html every time html.js changes.


    const watchGlobs = [`src/html.js`, `plugins/**/gatsby-ssr.js`].map(path => slash(directoryPath(path)));
    chokidar.watch(watchGlobs).on(`change`, async () => {
      await createIndexHtml(indexHTMLActivity); // eslint-disable-next-line no-unused-expressions

      socket === null || socket === void 0 ? void 0 : socket.to(`clients`).emit(`reload`);
    });
  }

  return {
    compiler,
    listener,
    webpackActivity,
    cancelDevJSNotice,
    websocketManager: _websocketManager.websocketManager,
    workerPool,
    webpackWatching: webpackDevMiddlewareInstance.context.watching
  };
}
//# sourceMappingURL=start-server.js.map